<?php
	
	/**
	 * Class Name: bs4Navwalker
	 * GitHub URI: https://github.com/dupkey/bs4navwalker
	 * Description: A custom WordPress nav walker class for Bootstrap 4 (v4.0.0-alpha.1) nav menus in a custom theme using the WordPress built in menu manager
	 * Version: 0.1
	 * Author: Dominic Businaro - @dominicbusinaro
   * Modified By: Nick Mak @kupoback
	 * License: GPL-2.0+
	 * License URI: http://www.gnu.org/licenses/gpl-2.0.txt
	 */
	
	class bs4Navwalker extends Walker_Nav_Menu {
		
		private $current_col = '';
		
		/**
		 * Starts the list before the elements are added.
		 *
		 * @see   Walker::start_lvl()
		 *
		 * @since 3.0.0
		 *
		 * @param string $output Passed by reference. Used to append additional content.
		 * @param int    $depth  Depth of menu item. Used for padding.
		 * @param array  $args   An array of arguments. @see wp_nav_menu()
		 */
		public function start_lvl( &$output, $depth = 0, $args = [] ) {
			//		$indent = str_repeat("\t", $depth);
			
			if ( 0 === $depth ) {
				$output .= "<div class=\"dropdown-menu level-{$depth}\"><div class=\"menu-container\"><ul class=\"dropdown-menu-wrap\">\n";
			} else {
				$output .= "<div class=\"sub-dropdown-menu-wrap\"><ul class=\"sub-dropdown-menu\">\n";
			}
			
		}
		
		/**
		 * Ends the list of after the elements are added.
		 *
		 * @see   Walker::end_lvl()
		 *
		 * @since 3.0.0
		 *
		 * @param string $output Passed by reference. Used to append additional content.
		 * @param int    $depth  Depth of menu item. Used for padding.
		 * @param array  $args   An array of arguments. @see wp_nav_menu()
		 */
		public function end_lvl( &$output, $depth = 0, $args = [] ) {
			//		$indent = str_repeat("\t", $depth);
			//		$output .= "$indent</ul>\n";
			
			if ( 0 === $depth ) {
				$output .= "</ul></div></div>";
			} else {
				$output .= "</ul></div></div>";
			}
		}
		
		/**
		 * Start the element output.
		 *
		 * @see   Walker::start_el()
		 *
		 * @since 3.0.0
		 *
		 * @param string $output Passed by reference. Used to append additional content.
		 * @param object $item   Menu item data object.
		 * @param int    $depth  Depth of menu item. Used for padding.
		 * @param array  $args   An array of arguments. @see wp_nav_menu()
		 * @param int    $id     Current item ID.
		 */
		public function start_el( &$output, $item, $depth = 0, $args = [], $id = 0 ) {
			
			if ( 1 === $depth && 'y' === $item->proj_submenu_divider ) {
				$output .= '</ul><!-- /.dropdown-menu-wrap --><ul class="dropdown-menu-wrap">';
			}
			
			//		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';
			
			$classes   = empty( $item->classes ) ? [] : (array) $item->classes;
			$classes[] = 'menu-item-' . $item->ID;
			
			if ( 0 === $depth && $item->has_children ) {
				$classes[] = ' dropdown';
			}
			
			if ( 0 === $depth ) {
				$num_cols = get_post_meta( $item->ID, '_proj_submenu_columns', true ) ?: '';
				if ( $num_cols ) {
					$classes[] = 'submenu_columns';
					$classes[] = 'cols-' . $num_cols;
				}
			}
			
			/**
			 * Filter the CSS class(es) applied to a menu item's list item element.
			 *
			 * @since 3.0.0
			 * @since 4.1.0 The `$depth` parameter was added.
			 *
			 * @param array  $classes The CSS classes that are applied to the menu item's `<li>` element.
			 * @param object $item    The current menu item.
			 * @param array  $args    An array of {@see wp_nav_menu()} arguments.
			 * @param int    $depth   Depth of menu item. Used for padding.
			 */
			$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args, $depth ) );
			
			// New
			
			$class_names .= ' nav-item';
			
			if ( in_array( 'current-menu-item', $classes ) ) {
				$class_names .= ' active';
			}
			
			//
			
			$class_names = $class_names ? ' class="' . esc_attr( $class_names ) . '"' : '';
			
			//		 print_r($class_names);
			
			/**
			 * Filter the ID applied to a menu item's list item element.
			 *
			 * @since 3.0.1
			 * @since 4.1.0 The `$depth` parameter was added.
			 *
			 * @param string $menu_id The ID that is applied to the menu item's `<li>` element.
			 * @param object $item    The current menu item.
			 * @param array  $args    An array of {@see wp_nav_menu()} arguments.
			 * @param int    $depth   Depth of menu item. Used for padding.
			 */
			$id = apply_filters( 'nav_menu_item_id', 'menu-item-' . $item->ID, $item, $args, $depth );
			$id = $id ? ' id="' . esc_attr( $id ) . '"' : '';
			
			// New
			//		if ($depth === 0) {
			//			$output .= $indent . '<li' . $id . $class_names .'>';
			//		}
			if ( 'y' !== $item->proj_submenu_divider ) {
				$output .= '<li' . $id . $class_names . '>';
			}
			
			$atts           = [];
			$atts['title']  = ! empty( $item->attr_title ) ? $item->attr_title : '';
			$atts['target'] = ! empty( $item->target ) ? $item->target : '';
			$atts['rel']    = ! empty( $item->xfn ) ? $item->xfn : '';
			$atts['href']   = ! empty( $item->url ) ? $item->url : '';
			
			// New
			if ( $depth === 0 ) {
				$atts['class'] = 'nav-link';
			}
			
			if ( $depth === 0 && in_array( 'menu-item-has-children', $classes ) ) {
				$atts['class']         .= ' dropdown-toggle';
				$atts['data-toggle']   = 'dropdown';
				$atts['aria-expanded'] = 'false';
			}
			
			if ( $depth > 0 ) {
				$atts['class'] = 'dropdown-item nav-link';
			}
			
			if ( $depth > 0 && in_array( 'menu-item-has-children', $classes ) ) {
				$atts['class']         .= ' nav-link dropdown-toggle';
				$atts['data-toggle']   = 'dropdown';
				$atts['aria-expanded'] = 'false';
			}
			
			if ( in_array( 'current-menu-item', $item->classes ) ) {
				$atts['class'] .= ' active';
			}
			// print_r($item);
			//
			
			/**
			 * Filter the HTML attributes applied to a menu item's anchor element.
			 *
			 * @since 3.6.0
			 * @since 4.1.0 The `$depth` parameter was added.
			 *
			 * @param array  $atts   {
			 *                       The HTML attributes applied to the menu item's `<a>` element, empty strings are ignored.
			 *
			 * @type string  $title  Title attribute.
			 * @type string  $target Target attribute.
			 * @type string  $rel    The rel attribute.
			 * @type string  $href   The href attribute.
			 * }
			 *
			 * @param object $item   The current menu item.
			 * @param array  $args   An array of {@see wp_nav_menu()} arguments.
			 * @param int    $depth  Depth of menu item. Used for padding.
			 */
			$atts = apply_filters( 'nav_menu_link_attributes', $atts, $item, $args, $depth );
			
			$attributes = '';
			foreach ( $atts as $attr => $value ) {
				if ( ! empty( $value ) ) {
					$value      = ( 'href' === $attr ) ? esc_url( $value ) : esc_attr( $value );
					$attributes .= ' ' . $attr . '="' . $value . '"';
				}
			}
			
			$item_output = $args->before;
			// New
			/*
			if ($depth === 0 && in_array('menu-item-has-children', $classes)) {
					$item_output .= '<a class="nav-link dropdown-toggle"' . $attributes .'data-toggle="dropdown">';
			} elseif ($depth === 0) {
					$item_output .= '<a class="nav-link"' . $attributes .'>';
			} else {
					$item_output .= '<a class="dropdown-item"' . $attributes .'>';
			}
			*/
			// Check to see if there is a shortcode item in the navigation
			// If so, then show it
			if ( strpos( $item->title, '[' ) !== false ) {
				$item_output .= do_shortcode( $item->title );
			} elseif ( 1 === $depth && 'y' === $item->proj_submenu_divider ) {
				$item_output .= '';
			} // Otherwise we will skip it
			else {
				$item_output .= '<a' . $attributes . '>';
				/** This filter is documented in wp-includes/post-template.php */
				$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;
				$item_output .= '</a>';
				$item_output .= $args->after;
			}
			/**
			 * Filter a menu item's starting output.
			 *
			 * The menu item's starting output only includes `$args->before`, the opening `<a>`,
			 * the menu item's title, the closing `</a>`, and `$args->after`. Currently, there is
			 * no filter for modifying the opening and closing `<li>` for a menu item.
			 *
			 * @since 3.0.0
			 *
			 * @param string $item_output The menu item's starting HTML output.
			 * @param object $item        Menu item data object.
			 * @param int    $depth       Depth of menu item. Used for padding.
			 * @param array  $args        An array of {@see wp_nav_menu()} arguments.
			 */
			$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );
		}
		
		/**
		 * Ends the element output, if needed.
		 *
		 * @see   Walker::end_el()
		 *
		 * @since 3.0.0
		 *
		 * @param string $output Passed by reference. Used to append additional content.
		 * @param object $item   Page data object. Not used.
		 * @param int    $depth  Depth of page. Not Used.
		 * @param array  $args   An array of arguments. @see wp_nav_menu()
		 */
		public function end_el( &$output, $item, $depth = 0, $args = [] ) {
			if ( isset( $args->has_children ) && $depth === 0 ) {
				$output .= "</li>\n";
			}
		}
	}
